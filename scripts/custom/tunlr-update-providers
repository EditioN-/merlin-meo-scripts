#!/bin/sh 
#
# The list of domains to unblock need to be configured both on the home router
# and on the tunlr server.  This script accomplishes both by reading 
# a list of domains from configs/custom/tunlr-providers, then:
#
# - Regenerating the home router's dnsmasq.conf.add configuration, which is 
# appended to the configuration that the Merlin firmware creates.
# - Logging into the tunrl-server and executing a custom script there to 
# update the necessary configuration on that end with the given domains.

source /jffs/scripts/custom/_net_functions
init_config 

PROVIDERS="" # this gets filled in by build_provider_list

#-----------------------------------------------------------------------------
build_provider_list () {
  for line in `grep  -v '#' $TUNLR_HOSTS_FILE | tr '/' '\n'`; do
    [ -z "$line" ] && continue 
    PROVIDERS="$PROVIDERS ${line}"
  done
}

#-----------------------------------------------------------------------------
generate_dnsmasq_servers_file () {

  if [ ! -f "$TUNLR_HOSTS_SRC_FILE" ]; then
    logger "$0: ERROR: Could not find file: $TUNLR_HOSTS_SRC_FILE" 
    exit 1
  fi

  logger "$0: generating file from template: $TUNLR_DNSMASQ_TEMPLATE_FILE and hosts in $TUNLR_HOSTS_SRC_FILE"

  echo "#---------- generated by $0 ----------#" > $TUNLR_DNSMASQ_DEST_FILE

  cat $TUNLR_DNSMASQ_TEMPLATE_FILE >> $TUNLR_DNSMASQ_DEST_FILE

  for provider in $PROVIDERS; do
    echo "server=/$provider/$TUNLR_SERVER_IP" >> $TUNLR_DNSMASQ_DEST_FILE
  done

  logger "$0: completed generating: $TUNLR_DNSMASQ_DEST_FILE"
}

#-----------------------------------------------------------------------------
update_remote_tunlr_config () {
  local p_list=`echo $PROVIDERS | sed 's/^ //' | sed 's/ /,/g'`
  logger "$0: providers: $p_list"
  tunlr_server_command $TUNLR_REMOTE_COMMAND providers $p_list
}

#=============================================================================

build_provider_list
generate_dnsmasq_servers_file
killall -HUP dnsmasq
update_remote_tunlr_config
